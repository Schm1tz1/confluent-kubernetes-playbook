---
apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: confluent
spec:
  license:
    globalLicense: true
  replicas: 3
  oneReplicaPerNode: true
  dataVolumeCapacity: 1G
  podTemplate:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
  image:
    application: confluentinc/cp-server:8.1.0
    init: confluentinc/confluent-init-container:3.1.0
  listeners:
    controller:
      authentication:
        type: mtls
        principalMappingRules:
          - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
          - "DEFAULT"
      tls:
        enabled: true
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:kraftcontroller
      - User:ssologin
  dependencies:
    mdsKafkaCluster:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: mtls
        sslClientAuthentication: true
      tls:
        enabled: true
    metricsClient:
      url: https://controlcenter.confluent.svc.cluster.local:9090
      authentication:
        type: mtls
      tls:
        enabled: true
        secretRef: tls-kraftcontroller
  tls:
    secretRef: tls-kraftcontroller
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: confluent
spec:
  license:
    globalLicense: true
  replicas: 3
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:kraftcontroller
      - User:ssologin
  oneReplicaPerNode: true
  image:
    application: confluentinc/cp-server:8.1.0
    init: confluentinc/confluent-init-container:3.1.0
  dataVolumeCapacity: 10Gi
  podTemplate:
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
  tls:
    secretRef: tls-kafka
  listeners:
    internal:
      authentication:
        type: mtls
        principalMappingRules:
          - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
          - "DEFAULT"
      tls:
        enabled: true
    external:
      authentication:
        # type: oauth
        # jaasConfig:
        #   secretRef: oauth-jass
        # oauthSettings:
        #   groupsClaimName: groups
        #   jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
        #   tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
        type: mtls
        mtls:
          sslClientAuthentication: "required"
          principalMappingRules:
            - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
            - "DEFAULT"
      tls:
        enabled: true
  metricReporter:
    enabled: true
    authentication:
      type: mtls
    tls:
      enabled: true
  configOverrides:
    server:
    # This fixes HTTP 400 Invalid SNI Errors from Jetty
      - "confluent.http.server.sni.host.check.enabled=false"
  services:
    kafkaRest:
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jass
          configuration:
            tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
        mtls:
          sslClientAuthentication: "required"
          principalMappingRules:
            - RULE:^CN=([a-zA-Z0-9]*).*$/$1/
            - DEFAULT
    mds:
      impersonation:
        admins:
          - User:kafka
          - User:CN=kafka
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: mds-token
      provider:
        mtls:
          sslClientAuthentication: "required"
          principalMappingRules:
            - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
            - "DEFAULT"
        oauth:
          configurations:
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
        oidc:
          clientCredentials:
            secretRef: oidccredential
          configurations:
            groupsClaimName: profile_groups
            subClaimName: sub
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            tokenBaseEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            # k8s-internal URL
            #issuer: http://keycloak:8080/realms/sso_test
            #authorizeBaseEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/auth
            # If accessing IdP via Ingress, use external URL via Ingress:
            issuer: https://keycloak.k8s.internal.schmitzi.net/realms/sso_test
            authorizeBaseEndpointUri: https://keycloak.k8s.internal.schmitzi.net/realms/sso_test/protocol/openid-connect/auth
            refreshToken: false
  dependencies:
    kafkaRest:
      bootstrapEndpoint: https://kafka.confluent.svc.cluster.local:8090
      authentication:
        type: oauth
        jaasConfig:
          secretRef: oauth-jass
        oauthSettings:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
          subClaimName: client_id
        sslClientAuthentication: true
      tls:
        enabled: true
        secretRef: tls-kafka
    kRaftController:
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: mtls
      clusterRef:
        name: kraftcontroller
    metricsClient:
      url: https://controlcenter.confluent.svc.cluster.local:9090
      authentication:
        type: mtls
      tls:
        enabled: true
        secretRef: tls-kafka
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestProxy
metadata:
  name: kafkarestproxy
  namespace: confluent
spec:
  license:
    globalLicense: true
  replicas: 1
  image:
    application: confluentinc/cp-kafka-rest:8.1.0
    init: confluentinc/confluent-init-container:3.1.0
  tls:
    secretRef: tls-kafkarestproxy
  authorization:
    type: rbac
  configOverrides:
    server:
    # This fixes HTTP 400 Invalid SNI Errors from Jetty
      - "sni.host.check.enabled=false"
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: mtls
        sslClientAuthentication: true
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jass
          configuration:
            tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: confluent
spec:
  license:
    globalLicense: true
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:8.1.0
    init: confluentinc/confluent-init-container:3.1.0
  tls:
    secretRef: tls-schemaregistry
  authorization:
    type: rbac
  authentication:
    type: mtls
    mtls:
      principalMappingRules:
        - "RULE:.*CN=([a-zA-Z0-9.-]*).*$/$1/"
        - "DEFAULT"
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: mtls
      tls:
        enabled: true
    mds:
      ssoProtocol: oidc
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: mtls
        sslClientAuthentication: true
      tls:
        enabled: true
  podTemplate:
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
  configOverrides:
    server:
    # This fixes HTTP 400 Invalid SNI Errors from Jetty
      - "sni.host.check.enabled=false"
---
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: confluent
spec:
  license:
    globalLicense: true
  authorization:
    type: rbac
  replicas: 1
  image:
    application: confluentinc/cp-enterprise-control-center-next-gen:2.3.0
    init: confluentinc/confluent-init-container:3.1.0
  dataVolumeCapacity: 10Gi
  tls:
    secretRef: tls-controlcenter
  configOverrides:
    server:
    # This fixes HTTP 400 Invalid SNI Errors from Jetty
      - "confluent.controlcenter.rest.sni.host.check.enabled=false"
  dependencies:
    prometheusClient:
      url: https://controlcenter.confluent.svc.cluster.local:9090
      authentication:
        type: mtls
      tls:
        enabled: true
        secretRef: tls-controlcenter
    alertManagerClient:
      url: https://controlcenter.confluent.svc.cluster.local:9093
      authentication:
        type: mtls
      tls:
        enabled: true
        secretRef: tls-controlcenter
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: mtls
      tls:
        enabled: true
    mds:
      ssoProtocol: oidc
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: mtls
        sslClientAuthentication: true
      tls:
        enabled: true
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      authentication:
        type: mtls
      tls:
        enabled: true
    connect:
      - name: connect
        url: https://connect.confluent.svc.cluster.local:8083
        authentication:
          type: mtls
        tls:
          enabled: true         
  services:
    prometheus:
       image: confluentinc/cp-enterprise-prometheus:2.3.0
       authentication:
         type: mtls
       tls:
         secretRef: tls-controlcenter
       pvc:
         dataVolumeCapacity: 10Gi
    alertmanager:
       image: confluentinc/cp-enterprise-alertmanager:2.3.0
       authentication:
         type: mtls
       tls:
         secretRef: tls-controlcenter
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: confluent
spec:
  kafkaClusterRef:
    name: kafka
    namespace: confluent
  kafkaRest:
    endpoint: https://kafka.confluent.svc.cluster.local:8090
    authentication:
      type: oauth
      oauth:
        secretRef: oauth-jass
        configuration:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
      sslClientAuthentication: true
    tls:
      secretRef: tls-kafka